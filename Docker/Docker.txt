Commands used in DOCKERFILE:
==========================

Base Image: It fulfills the base requirements like OS (Linux X.x) for running the application. We can add layers on top of base image, like anaconda, MySql etc.

FROM: We use FROM to read base image. Or build the container using specified base image.

eg:  FROM continuumio/anaconda

COPY: Copies essential files required for the application in container. Like model pickled object and cleaning function python files to run a ML model.

EXPOSE: Exposes docker container to public on specified port. Default port is 5000

WORKDIR: Sets a default working directory for application and the app uses files from that specified directory. 

RUN: Runs the commands inside the docker container. Like the container environment might need Flask to run flask micro-services. 

eg: RUN pip install flask

CMD: Last command in docker file. Allows to run the specified command run indefinitely. It will use container port to communicate to the application.

eg: CMD python flask_demo.py 


Command to Build and Run Docker Container:
==========================================

docker --version

#Test Docker Container:

docker run hello-world
docker image ls
docker container ls -all
docker ps -a


## List Docker CLI commands
docker
docker container --help

## Display Docker version and info
docker --version
docker version
docker info

## Execute Docker image
docker run hello-world

## List Docker images
docker image ls

## List Docker containers (running, all, all in quiet mode)
docker container ls
docker container ls --all
docker container ls -aq


docker build -t friendlyhello .  # Create image using this directory's Dockerfile
docker run -p 4000:80 friendlyhello  # Run "friendlyhello" mapping port 4000 to 80
docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode
docker container ls                                # List all running containers
docker container ls -a             # List all containers, even those not running
docker container stop <hash>           # Gracefully stop the specified container
docker container kill <hash>         # Force shutdown of the specified container
docker container rm <hash>        # Remove specified container from this machine
docker container rm $(docker container ls -a -q)         # Remove all containers
docker image ls -a                             # List all images on this machine
docker image rm <image id>            # Remove specified image from this machine



# Remove all images from this machine
docker login             # Log in this CLI session using your Docker credentials
docker tag <image> username/repository:tag  # Tag <image> for upload to registry
docker push username/repository:tag            # Upload tagged image to registry

docker run username/repository:tag                   # Run image from a registry



